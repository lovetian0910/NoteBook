项目背景说明：
该项目为企鹅电竞TV版直播间模块的实现。企鹅电竞TV版最初采用全Flutter框架开发，由于Flutter框架下播放器在某些电视盒子上无法支持4K直播流播放，所以直播间模块改为Android原生开发。
直播间功能主要包括：
1、播放直播流
2、弹幕展示
3、直播间底部控制栏浮层，按确认键弹出，其中包括弹幕开关、清晰度选择、关注主播功能
4、直播间左侧直播推荐列表，按方向键左弹出
5、直播间右侧观看历史列表，按方向键右弹出

代码架构说明：
本项目采用MVVM框架：
View：将不同UI模块使用自定义View单独实现，并在Activity中统一管理。
ViewModel：根据UI模块切分为多个ViewModel处理业务逻辑与数据更新。ViewModel对UI的更新使用Android Jetpack提供的LiveData实现。
Model：使用单例模式构建数据仓库，实现后台拉取数据与数据缓存；ViewModel可以直接访问数据仓库，决定拉取数据时机。
为避免View和ViewModel之间以及ViewModel之间的耦合，实现了一个简单的消息总线，类似广播方式，ViewModel创建时会注册进总线，发送消息后会遍历所有注册的ViewModel通知消息，ViewModel决定是否处理该消息。

代码结构详细说明：
LiveRoomActivity.kt：直播间Activity；初始化View、ViewModel以及对LiveData的监听
LiveRoomChannel.kt：Dart环境和Android环境互相通信通道
LiveRoomContext.kt：直播间上下文环境，保存一些直播间基本信息

data：数据Bean集合
|-AnchorCardInfo.kt：主播关注状态、用户是否登陆
|-DanmakuList.kt：弹幕列表
|-FollowRsp.kt：关注/取消关注的后台请求结果
|-Get4KUrlRsp.kt：4K流地址
|-LiveRoomInfo.kt：直播间基础信息，标题、AppId、分类Id、分类名、主播名、主播头像URL、直播间简介、默认清晰度等级、是否开播、流地址列表
|-LiveRoomQuality.kt：直播流清晰度，描述（蓝光8M、蓝光4M、超清等）、流地址、清晰度分级数值
|-RecommendCategoryData.kt：直播间推荐分类数据：分类名、分类ID、直播间列表
|-RecommendData.kt：直播间推荐列表
|-SimpleLiveRoomData.kt：直播卡片基础信息：标题、主播名、主播ID、封面；用于推荐列表、观看历史以及停播推荐
|-StopRecommendRsp.kt：停播推荐列表后台返回数据；用于直播间中按上下键切换相关直播
|-WatchHistoryRsp.kt：观看历史列表后台返回数据

repository：数据仓库集合；缓冲具体数据，并实现向后台/本地文件拉取数据的能力
|-AnchorCardRepository.kt：主播信息仓库；包含拉取主播信息、向后台请求关注/取消关注功能
|-DefaultStreamRepository.kt：默认清晰度仓库；实现从本地（SharedPreference）和后台获取默认清晰度功能，优先使用本地缓存
|-LiveRoomRepository.kt：直播间基础信息仓库；实现从后台拉取直播间展示所需基本信息
|-RecommendRepository.kt：直播间推荐列表仓库
|-StopRecommendRepository.kt：停播推荐列表仓库；向后台拉取当前直播间相关的直播间列表，用于按方向键上下切换直播间
|-WatchHistoryRepository.kt：观看历史列表仓库

request：后台请求集合；由于在Dart环境中实现了一套HTTP请求的组件，这里就不再在Android代码中重新实现一套HTTP请求功能；而是将请求通过EventChannel传递给Dart环境，请求后后台返回结果再通过MethodChannel传递回来。
|-ChannelRequestManager.kt：后台请求管理；由于请求是异步且需要跨Dart和Android环境，请求结果采用回调方式传递。请求时传入Callback，用当前时间戳作为CallbackID把Callback缓存，并将CallbackID加入请求中传递给Dart环境；请求结果返回时同样带上CallbackID，收到结果根据CallbackID找到对应Callback进行回调
|-BaseReq.kt：请求基类；定义回调接口
|-AnchorCardRequest.kt：主播信息请求
|-FollowRequest.kt：关注/取消关注请求
|-Get4KUrlRequest.kt：获取4K流地址请求
|-LiveRoomInfoRequest.kt：直播间信息请求
|-RecommendRequest.kt：直播推荐列表请求
|-StopRecommendRequest.kt：停播推荐列表请求
|-WatchHistoryRequest.kt：观看历史列表请求
|-WatchRequest.kt：进入/退出直播间通知后台请求

viewmodel：ViewModel集合，根据UI模块划分多个ViewModel
|-ViewModelBus.kt：轻量级的消息总线，ViewModel需要注册进总线，发送消息的时候遍历通知所有注册的ViewModel
|-MessengerViewModel.kt：ViewModel基类，在创建时注册进总线
|-ControllerViewModel.kt：直播间控制栏模块，包括清晰度选择、弹幕开关、关注按钮等
|-DanmakuViewModel.kt：弹幕相关业务逻辑，控制弹幕是否展示、切换弹幕源等
|-LiveRoomCommonViewModel.kt：控制直播间浮层（控制栏、推荐列表、观看历史列表、直播间操作引导）自动隐藏
|-PlayerViewModel.kt：播放器相关控制逻辑；包括播放器控制、缓冲页面/错误页面展示等
|-RecommendViewModel.kt：推荐列表相关逻辑；除了实现从数据仓库获取推荐列表填充UI外，主要实现了打开推荐列表需要定位到当前直播间的功能
|-WatchHistoryViewModel.kt：观看历史相关逻辑

widget：包含通用组件和按照功能模块用自定义View分别实现的UI模块，旨在减少Activity中的代码量
|-DialogButton.kt：对话框中的按钮，获得焦点/失去焦点修改背景色和文字颜色
|-ErrorTips.kt：直播间出错提示
|-LiveRoomControllerButton.kt：直播间控制栏上的一级按钮，有普通态、焦点态、选中态不同样式
|-LiveRoomControllerListButton.kt：直播间控制栏二级列表按钮，普通态、焦点态不同样式
|-LiveRoomControllerView.kt：直播间控制栏UI
|-NotLiveTips.kt：直播间停播提示
|-RecommendCategoryItemView.kt：推荐列表中的直播分类Item
|-RecommendList.kt：直播间左侧浮层推荐列表
|-SimpleLiveRoomCardView.kt：推荐列表和历史记录中的直播间卡片Item
|-UnFollowDialog.kt：取消关注用户确认弹窗
|-VideoLoadingView.kt：视频缓冲提示
|-WatchHistoryList.kt：观看历史列表
|-recyclerview
| |-CustomFocusRecyclerView.kt：对RecyclerView焦点进行特殊处理，增加焦点记忆、焦点移出控制、焦点获取/失去监听功能
| |-SpacesItemDecoration.kt：给RecyclerView的Item增加间距